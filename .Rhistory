library("tidyverse")
R1_feat <- read_csv("C:\\Users\\slgai\\Documents\\GitHub\\6500project\\UniqueAlbumFeat.csv")
str(R1_feat)
View(R1_feat)
View(R1_feat)
library("tidyverse")
testdf <- read_csv("C:\\Users\\slgai\\Documents\\GitHub\\6500project\\UniqueAlbumFeat.csv")
str(testdf)
View(testdf)
View(testdf)
b <- ggplot(data=testdf)
b + geom_freqpoly(mapping = aes(x = id), binwidth = 50000, size=1.5, color="red")
ggplot(testdf, aes(x=id)) + geom_histogram(binwidth = 1)
ggplot(data = testdf) + geom_count(mapping = aes(x = acousticness, y = id)
ggplot(data = testdf) + geom_count(mapping = aes(x = acousticness, y = id))
library("tidyverse")
R1_feat <- read_csv("C:\\Users\\slgai\\Documents\\GitHub\\6500project\\UniqueAlbumFeat.csv")
str(R1_feat)
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = acousticness, color = id)) +
scale_color_gradient(low="blue", high="red")+
geom_hline(yintercept=mean(R1_feat$acousticness), color="green")
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = danceability, color = id)) +
scale_color_gradient(low="blue", high="red") +
geom_hline(yintercept=mean(R1_feat$danceability), color="green")
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = energy, color = id)) +
scale_color_gradient(low="blue", high="red") +
geom_hline(yintercept=mean(R1_feat$energy), color="green")
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = instrumentalness, color = id)) +
scale_color_gradient(low="blue", high="red") +
geom_hline(yintercept=mean(R1_feat$instrumentalness), color="green")
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = key, color = id)) +
scale_color_gradient(low="blue", high="red") +
geom_hline(yintercept=mean(R1_feat$key), color="green")
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = liveness, color = id)) +
scale_color_gradient(low="blue", high="red") +
geom_hline(yintercept=mean(R1_feat$liveness), color="green")
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = loudness, color = id)) +
scale_color_gradient(low="blue", high="red") +
geom_hline(yintercept=mean(R1_feat$loudness), color="green")
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = mode, color = id)) +
scale_color_gradient(low="blue", high="red") +
geom_hline(yintercept=mean(R1_feat$mode), color="green")
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = speechiness, color = id)) +
scale_color_gradient(low="blue", high="red") +
geom_hline(yintercept=mean(R1_feat$speechiness), color="green")
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = tempo, color = id)) +
scale_color_gradient(low="blue", high="red") +
geom_hline(yintercept=mean(R1_feat$tempo), color="green")
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = valence, color = id)) +
scale_color_gradient(low="blue", high="red") +
geom_hline(yintercept=mean(R1_feat$valence), color="green")
ggplot(data=filter(R1_feat, id > 10)) +
geom_point(mapping = aes(x = album, y = acousticness, color = id)) +
scale_color_gradient(low="blue", high="red")
#does not tell much
p1 <- ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = acousticness, color = id)) +
scale_color_gradient(low="blue", high="red")+
geom_hline(yintercept=mean(R1_feat$acousticness), color="green")
p2 <- ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = danceability, color = id)) +
scale_color_gradient(low="blue", high="red") +
geom_hline(yintercept=mean(R1_feat$danceability), color="green")
grid.arrange(p1, p2, nrow=1)
library(tidyverse)
# use ? to get help.  Consider a dataset (e.g., mpg), ?mpg gives
# a help page
?mpg
mpg # to show the first 10 rows + information
# View/Edit in grid format and add to the environment
# Note that you can edit existing values and add new
# values using this method.
fix(mpg)
# Is therea relationship between engine size and gas mileage?
# basic scatter plot
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
# help again - note the question mark in front of the function name
?ggplot()
# color the dots by class (a new variable from the data).  Note that
# the color parameter is inside the aesthetic function here
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
# What about city mileage?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = cty, color = class))
# use dot size
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = class))
# use size and color
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = class, color=class))
# use transparency (alpha)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
# orange dots - note that the color parameter is outside of
# the aesthetic function here.
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color="orange")
# Why not blue?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color="blue"))
# ---- Ended on 10/22
#
# Note that we can also define the mapping with the data rather than
# with the geom.  This will be useful below when we have multiple
# geoms.
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) +
geom_point()
# The iris dataset
?iris
tiris <- as_tibble(iris)
# other built-in datasets?
?datasets
library(help = "datasets")
ggplot(data = tiris, mapping = aes(x = Petal.Length, y = Petal.Width)) +
geom_point(mapping = aes(color = Species))
#
# facets
#
# single variable (the "formula" in R-speak)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class)
# Add the scatter plot as an overlay
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
# here's where it's conveneient to define part
# of the mapping in the initial ggplot function call
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_smooth() +
geom_point(mapping = aes(color = class))
# let's try a generalized linear model (glm)
# Note that the method parameter is outside of the aes -- it's part of
# the geom, not the aesthetic.
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy), method="glm")
# with the scatter overlay
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_smooth(method = "glm") +
geom_point(mapping = aes(color = class))
# divide by drv and use different line types.
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
# divide by class and use different line types
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = class))
# What about some filtering -- and turn off the confidence estimates
ggplot(data = mpg[mpg$class %in% c('compact', 'subcompact'),]) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = class), se=FALSE)
# back to drv type with colors
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
)
# now add a dot plot as an overlay
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_smooth() +
geom_point()
# linear fit by drv, no confidence estimates
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_smooth(method="glm", se=FALSE) +
geom_point()
# Only front-wheel drive
ggplot(data = mpg[mpg$drv == 'f',],
mapping = aes(x = displ, y = hwy, color = drv)) +
geom_smooth(method="glm", se=FALSE) +
geom_point()
# ---------------------------------
#
# Statistical transformations - for the previous plots, we
# were plotting the data "as is" with different aesthetics.
# Now let's look and some aggregation/transformations.
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
diamonds
# if you prefer proportions ...
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
#Help!
?geom_bar
# More details
vignette("ggplot2-specs")
# Add some stats - stat_summary() summarizes the y values
# for each unique x value
ggplot(data = diamonds) +
stat_summary(
mapping = aes(x = cut, y = depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
?stat_summary
# let's add some color
# outline
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, colour = cut))
# fill - using the same variable.
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut))
# fill on a different variable
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity))
# diffrent layout, same information
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity), position = "dodge")
#
# Coordinate Systems
#
# boxplots
# vertical
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot()
ggplot(data = diamonds, mapping = aes(x = cut, y = price)) +
geom_boxplot()
ggplot(data = R1_feat, mapping = aes(x = acousticness, y = id)) +
geom_boxplot()
ggarrange(p1, p2, ncol=2, nrow=1)
library("ggpubr")
#
# Coordinate Systems
#
# boxplots
# vertical
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot()
ggplot(data = diamonds, mapping = aes(x = cut, y = price)) +
geom_boxplot()
# horizontal
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() +
coord_flip()
# Colorful boxplot ...
ggplot(data = diamonds, mapping = aes(x = cut, y = price)) +
geom_boxplot(color="blue", fill="orange") +
coord_flip()
# histogram showing distribution of frequency of number one rankings
ggplot(R1_feat, aes(x=id)) + geom_histogram(binwidth = 1)
# histogram showing distribution of frequency of number one rankings
ggplot(R1_feat, aes(x=id)) + geom_histogram(binwidth =10)
names(R1_feat)[names(R1_feat) == "id"] <- "FreqAsNum1"
View(R1_feat)
View(R1_feat)
library("tidyverse")
library("ggpubr")
R1_feat <- read_csv("C:\\Users\\slgai\\Documents\\GitHub\\6500project\\UniqueAlbumFeat.csv")
str(R1_feat)
names(R1_feat)[names(R1_feat) == "id"] <- "FreqAsNum1"
# histogram showing distribution of frequency of number one rankings
ggplot(R1_feat, aes(x=id)) + geom_histogram(binwidth =10)
library("tidyverse")
library("ggpubr")
R1_feat <- read_csv("C:\\Users\\slgai\\Documents\\GitHub\\6500project\\UniqueAlbumFeat.csv")
str(R1_feat)
names(R1_feat)[names(R1_feat) == "id"] <- "FreqAsNum1"
# histogram showing distribution of frequency of number one rankings
ggplot(R1_feat, aes(x=FreqAsNum1)) + geom_histogram(binwidth =10)
# histogram showing distribution of frequency of number one rankings
ggplot(R1_feat, aes(x=FreqAsNum1)) + geom_histogram(binwidth =5)
View(R1_feat)
View(R1_feat)
# histogram showing distribution of frequency of number one rankings
ggplot(R1_feat, aes(x=FreqAsNum1)) + geom_histogram(binwidth =2)
#does not tell much
p1 <- ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = acousticness, color = id)) +
scale_color_gradient(low="blue", high="red")+
geom_hline(yintercept=mean(R1_feat$acousticness), color="green")
p2 <- ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = danceability, color = id)) +
scale_color_gradient(low="blue", high="red") +
geom_hline(yintercept=mean(R1_feat$danceability), color="green")
ggarrange(p1, p2, ncol=2, nrow=1)
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = energy, color = id)) +
scale_color_gradient(low="blue", high="red") +
geom_hline(yintercept=mean(R1_feat$energy), color="green")
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = instrumentalness, color = id)) +
scale_color_gradient(low="blue", high="red") +
geom_hline(yintercept=mean(R1_feat$instrumentalness), color="green")
p1 + p2
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = energy, color = id)) +
scale_color_gradient(low="blue", high="red") +
geom_hline(yintercept=mean(R1_feat$energy), color="green") + p1 +p2
#does not tell much
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = acousticness, color = id)) +
scale_color_gradient(low="blue", high="red")+
geom_hline(yintercept=mean(R1_feat$acousticness), color="green")
#does not tell much
p1 <- ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = acousticness, color = FreqAsNum1)) +
scale_color_gradient(low="blue", high="red")+
geom_hline(yintercept=mean(R1_feat$acousticness), color="green")
p2 <- ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = danceability, color = FreqAsNum1)) +
scale_color_gradient(low="blue", high="red") +
geom_hline(yintercept=mean(R1_feat$danceability), color="green")
p1 + p2
#does not tell much
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = acousticness, color = FreqAsNum1)) +
scale_color_gradient(low="blue", high="red")+
geom_hline(yintercept=mean(R1_feat$acousticness), color="green")
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = danceability, color = FreqAsNum1)) +
scale_color_gradient(low="blue", high="red") +
geom_hline(yintercept=mean(R1_feat$danceability), color="green")
#does not tell much
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = acousticness, color = FreqAsNum1)) +
scale_color_gradient(low="blue", high="red")+
geom_hline(yintercept=mean(R1_feat$acousticness), color="green")+
geom_point(mapping = aes(x = album, y = danceability, color = FreqAsNum1)) +
scale_color_gradient(low="blue", high="red") +
geom_hline(yintercept=mean(R1_feat$danceability), color="green")
library(tidyverse)
# use ? to get help.  Consider a dataset (e.g., mpg), ?mpg gives
# a help page
?mpg
mpg # to show the first 10 rows + information
# View/Edit in grid format and add to the environment
# Note that you can edit existing values and add new
# values using this method.
fix(mpg)
?facet_wrap()
library("tidyverse")
library("ggpubr")
R1_feat <- read_csv("C:\\Users\\slgai\\Documents\\GitHub\\6500project\\UniqueAlbumFeat.csv")
str(R1_feat)
names(R1_feat)[names(R1_feat) == "id"] <- "FreqAsNum1"
# histogram showing distribution of frequency of number one rankings
ggplot(R1_feat, aes(x=FreqAsNum1)) + geom_histogram(binwidth =2)
#does not tell much
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = acousticness, color = FreqAsNum1)) +
scale_color_gradient(low="blue", high="red")+
geom_hline(yintercept=mean(R1_feat$acousticness), color="green")
library(tidyverse)
# use ? to get help.  Consider a dataset (e.g., mpg), ?mpg gives
# a help page
?mpg
mpg # to show the first 10 rows + information
# View/Edit in grid format and add to the environment
# Note that you can edit existing values and add new
# values using this method.
fix(mpg)
# Is therea relationship between engine size and gas mileage?
# basic scatter plot
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
# help again - note the question mark in front of the function name
?ggplot()
# color the dots by class (a new variable from the data).  Note that
# the color parameter is inside the aesthetic function here
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
# What about city mileage?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = cty, color = class))
View(mpg)
#
# facets
#
# single variable (the "formula" in R-speak)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class)
View(R1_feat)
View(R1_feat)
#does not tell much
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = acousticness, color = FreqAsNum1)) +
scale_color_gradient(low="blue", high="red")+
geom_hline(yintercept=mean(R1_feat$acousticness), color="green")
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = danceability, color = FreqAsNum1)) +
scale_color_gradient(low="blue", high="red") +
geom_hline(yintercept=mean(R1_feat$danceability), color="green")
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = energy, color = FreqAsNum1)) +
scale_color_gradient(low="blue", high="red") +
geom_hline(yintercept=mean(R1_feat$energy), color="green")
ggplot(data=R1_feat)+
geom_point(mapping=aes(x=danceability, y=energy))+
facet_wrap(~FreqAsNum1)
ggplot(data=R1_feat)+
geom_point(mapping=aes(x=danceability, y=energy))
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = instrumentalness, color = FreqAsNum1)) +
scale_color_gradient(low="blue", high="red") +
geom_hline(yintercept=mean(R1_feat$instrumentalness), color="green")
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = key, color = FreqAsNum1)) +
scale_color_gradient(low="blue", high="red") +
geom_hline(yintercept=mean(R1_feat$key), color="green")
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = liveness, color = FreqAsNum1)) +
scale_color_gradient(low="blue", high="red") +
geom_hline(yintercept=mean(R1_feat$liveness), color="green")
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = loudness, color = FreqAsNum1)) +
scale_color_gradient(low="blue", high="red") +
geom_hline(yintercept=mean(R1_feat$loudness), color="green")
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = mode, color = FreqAsNum1)) +
scale_color_gradient(low="blue", high="red") +
geom_hline(yintercept=mean(R1_feat$mode), color="green")
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = speechiness, color = FreqAsNum1)) +
scale_color_gradient(low="blue", high="red") +
geom_hline(yintercept=mean(R1_feat$speechiness), color="green")
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = tempo, color = FreqAsNum1)) +
scale_color_gradient(low="blue", high="red") +
geom_hline(yintercept=mean(R1_feat$tempo), color="green")
ggplot(data = R1_feat) +
geom_point(mapping = aes(x = album, y = valence, color = FreqAsNum1)) +
scale_color_gradient(low="blue", high="red") +
geom_hline(yintercept=mean(R1_feat$valence), color="green")
ggplot(data=filter(R1_feat, FreqAsNum1 > 10)) +
geom_point(mapping = aes(x = album, y = acousticness, color = FreqAsNum1)) +
scale_color_gradient(low="blue", high="red")
ggplot(data=R1_feat)+
geom_point(mapping=aes(x=danceability, y=key))
ggplot(data=R1_feat)+
geom_point(mapping=aes(x=danceability, y=tempo))
ggplot(data=R1_feat)+
geom_point(mapping=aes(x=danceability, y=valence))
ggplot(data=R1_feat)+
geom_point(mapping=aes(x=key, y=energy))
ggplot(data=R1_feat)+
geom_point(mapping=aes(x=tempo, y=energy))
ggplot(data=R1_feat)+
geom_point(mapping=aes(x=valence, y=energy))
ggplot(data=R1_feat)+
geom_point(mapping=aes(x=key, y=tempo))
ggplot(data=R1_feat)+
geom_point(mapping=aes(x=key, y=valence))
ggplot(data=R1_feat)+
geom_point(mapping=aes(x=valence, y=tempo))
ggplot(data=R1_feat)+
geom_point(mapping=aes(x=danceability, y=valence))+
facet_wrap(~FreqAsNum1)
